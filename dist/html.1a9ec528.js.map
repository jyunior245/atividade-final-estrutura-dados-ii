{"mappings":"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","sources":["<anon>","src/index.ts","src/model/arvoreBusca.ts","src/model/noArvore.ts"],"sourcesContent":["/*\r\nAtividade Final de Estrutura de Dados II\r\nTurma.: ADS 3º Período - Noturno\r\nEquipe: \r\n    - Francisnilto dos Santos Nascimento\r\n    - Vanessa Pereira Cunha \r\n*/ /*\r\nAtividade Final de Estrutura de Dados II\r\nTurma.: ADS 3º Período - Noturno\r\nEquipe: \r\n    - Francisnilto dos Santos Nascimento\r\n    - Vanessa Pereira Cunha \r\n*/ /*\r\nAtividade Final de Estrutura de Dados II\r\nTurma.: ADS 3º Período - Noturno\r\nEquipe: \r\n    - Francisnilto dos Santos Nascimento\r\n    - Vanessa Pereira Cunha \r\n*/ class $6d41397c99658dc1$export$d3b2786d74aba50d {\n    valor;\n    esquerdo = null;\n    direito = null;\n    constructor(valor){\n        this.valor = valor;\n    }\n}\n\n\nclass $c39e5a65f36c81b1$export$5bf6177d9d7f72fb {\n    raiz = null;\n    quantidade = 0;\n    comparar;\n    constructor(comparador){\n        if (comparador) this.comparar = comparador;\n        else this.comparar = function(a, b) {\n            if (a === b) return 0;\n            if (a < b) return -1;\n            return 1;\n        };\n    }\n    inserir(valor) {\n        const novoNo = new (0, $6d41397c99658dc1$export$d3b2786d74aba50d)(valor);\n        if (this.raiz === null) {\n            this.raiz = novoNo;\n            this.quantidade = 1;\n            return;\n        }\n        let atual = this.raiz;\n        while(true){\n            const comp = this.comparar(valor, atual.valor);\n            if (comp === 0) return; // não insere duplicatas\n            if (comp < 0) {\n                if (atual.esquerdo === null) {\n                    atual.esquerdo = novoNo;\n                    this.quantidade++;\n                    return;\n                }\n                atual = atual.esquerdo;\n            } else {\n                if (atual.direito === null) {\n                    atual.direito = novoNo;\n                    this.quantidade++;\n                    return;\n                }\n                atual = atual.direito;\n            }\n        }\n    }\n    contem(valor) {\n        return this.encontrarNo(valor) !== null;\n    }\n    buscaLargura() {\n        const resultado = [];\n        if (this.raiz === null) return resultado;\n        const fila = [\n            this.raiz\n        ];\n        while(fila.length > 0){\n            const no = fila.shift();\n            resultado.push(no.valor);\n            if (no.esquerdo !== null) fila.push(no.esquerdo);\n            if (no.direito !== null) fila.push(no.direito);\n        }\n        return resultado;\n    }\n    preOrdem() {\n        const resultado = [];\n        function visitar(no) {\n            if (no === null) return;\n            resultado.push(no.valor);\n            visitar(no.esquerdo);\n            visitar(no.direito);\n        }\n        visitar(this.raiz);\n        return resultado;\n    }\n    emOrdem() {\n        const resultado = [];\n        function visitar(no) {\n            if (no === null) return;\n            visitar(no.esquerdo);\n            resultado.push(no.valor);\n            visitar(no.direito);\n        }\n        visitar(this.raiz);\n        return resultado;\n    }\n    posOrdem() {\n        const resultado = [];\n        function visitar(no) {\n            if (no === null) return;\n            visitar(no.esquerdo);\n            visitar(no.direito);\n            resultado.push(no.valor);\n        }\n        visitar(this.raiz);\n        return resultado;\n    }\n    altura() {\n        function calcularAltura(no) {\n            if (no === null) return -1;\n            const alturaEsquerda = calcularAltura(no.esquerdo);\n            const alturaDireita = calcularAltura(no.direito);\n            if (alturaEsquerda > alturaDireita) return alturaEsquerda + 1;\n            else return alturaDireita + 1;\n        }\n        return calcularAltura(this.raiz);\n    }\n    quantidadeElementos() {\n        return this.quantidade;\n    }\n    ancestrais(valor) {\n        const caminho = [];\n        let atual = this.raiz;\n        while(atual !== null){\n            const comp = this.comparar(valor, atual.valor);\n            if (comp === 0) break;\n            caminho.push(atual.valor);\n            if (comp < 0) atual = atual.esquerdo;\n            else atual = atual.direito;\n        }\n        if (atual === null || this.comparar(atual.valor, valor) !== 0) return [];\n        return caminho;\n    }\n    descendentes(valor) {\n        const noInicial = this.encontrarNo(valor);\n        if (noInicial === null) return [];\n        const resultado = [];\n        function visitar(no) {\n            if (no === null) return;\n            resultado.push(no.valor);\n            visitar(no.esquerdo);\n            visitar(no.direito);\n        }\n        visitar(noInicial.esquerdo);\n        visitar(noInicial.direito);\n        return resultado;\n    }\n    nivelDo(valor) {\n        let nivel = 0;\n        let atual = this.raiz;\n        while(atual !== null){\n            const comp = this.comparar(valor, atual.valor);\n            if (comp === 0) return nivel;\n            if (comp < 0) atual = atual.esquerdo;\n            else atual = atual.direito;\n            nivel++;\n        }\n        return -1;\n    }\n    ehEstritamenteBinaria() {\n        function verificar(no) {\n            if (no === null) return true;\n            const temEsquerdo = no.esquerdo !== null;\n            const temDireito = no.direito !== null;\n            if (temEsquerdo && !temDireito || !temEsquerdo && temDireito) return false;\n            return verificar(no.esquerdo) && verificar(no.direito);\n        }\n        return verificar(this.raiz);\n    }\n    ehPerfeita() {\n        const altura = this.altura();\n        if (altura < 0) return true;\n        const esperado = Math.pow(2, altura + 1) - 1;\n        return this.quantidade === esperado;\n    }\n    encontrarNo(valor) {\n        let atual = this.raiz;\n        while(atual !== null){\n            const comp = this.comparar(valor, atual.valor);\n            if (comp === 0) return atual;\n            if (comp < 0) atual = atual.esquerdo;\n            else atual = atual.direito;\n        }\n        return null;\n    }\n}\n\n\nfunction $b4e14b6b8da86996$var$executarTestes() {\n    const arvore = new (0, $c39e5a65f36c81b1$export$5bf6177d9d7f72fb)();\n    console.log(\"--- Inserindo elementos ---\");\n    [\n        50,\n        30,\n        70,\n        20,\n        40,\n        60,\n        80\n    ].forEach((v)=>arvore.inserir(v));\n    console.log(\"Elementos inseridos.\");\n    console.log(\"--- Busca em Largura ---\");\n    console.log(arvore.buscaLargura());\n    console.log(\"--- Pr\\xe9-Ordem ---\");\n    console.log(arvore.preOrdem());\n    console.log(\"--- Em-Ordem ---\");\n    console.log(arvore.emOrdem());\n    console.log(\"--- P\\xf3s-Ordem ---\");\n    console.log(arvore.posOrdem());\n    console.log(\"--- Cont\\xe9m 40? ---\", arvore.contem(40));\n    console.log(\"--- Cont\\xe9m 99? ---\", arvore.contem(99));\n    console.log(\"--- Altura da \\xc1rvore ---\", arvore.altura());\n    console.log(\"--- Quantidade de Elementos ---\", arvore.quantidadeElementos());\n    console.log(\"--- Ancestrais do 60 ---\", arvore.ancestrais(60));\n    console.log(\"--- Descendentes do 30 ---\", arvore.descendentes(30));\n    console.log(\"--- N\\xedvel do 80 ---\", arvore.nivelDo(80));\n    console.log(\"--- \\xc9 Estritamente Bin\\xe1ria? ---\", arvore.ehEstritamenteBinaria());\n    console.log(\"--- \\xc9 Perfeita? ---\", arvore.ehPerfeita());\n}\n$b4e14b6b8da86996$var$executarTestes();\n\n\n//# sourceMappingURL=html.1a9ec528.js.map\n","/*\r\nAtividade Final de Estrutura de Dados II\r\nTurma.: ADS 3º Período - Noturno\r\nEquipe: \r\n    - Francisnilto dos Santos Nascimento\r\n    - Vanessa Pereira Cunha \r\n*/\r\n\r\nimport { ArvoreBuscaBinaria } from \"./model/arvoreBusca\";\r\n\r\nfunction executarTestes() {\r\n  const arvore = new ArvoreBuscaBinaria<number>();\r\n\r\n  console.log(\"--- Inserindo elementos ---\");\r\n  [50, 30, 70, 20, 40, 60, 80].forEach(v => arvore.inserir(v));\r\n  console.log(\"Elementos inseridos.\");\r\n\r\n  console.log(\"--- Busca em Largura ---\");\r\n  console.log(arvore.buscaLargura());\r\n\r\n  console.log(\"--- Pré-Ordem ---\");\r\n  console.log(arvore.preOrdem());\r\n\r\n  console.log(\"--- Em-Ordem ---\");\r\n  console.log(arvore.emOrdem());\r\n\r\n  console.log(\"--- Pós-Ordem ---\");\r\n  console.log(arvore.posOrdem());\r\n\r\n  console.log(\"--- Contém 40? ---\", arvore.contem(40));\r\n  console.log(\"--- Contém 99? ---\", arvore.contem(99));\r\n\r\n  console.log(\"--- Altura da Árvore ---\", arvore.altura());\r\n  console.log(\"--- Quantidade de Elementos ---\", arvore.quantidadeElementos());\r\n\r\n  console.log(\"--- Ancestrais do 60 ---\", arvore.ancestrais(60));\r\n  console.log(\"--- Descendentes do 30 ---\", arvore.descendentes(30));\r\n  console.log(\"--- Nível do 80 ---\", arvore.nivelDo(80));\r\n\r\n  console.log(\"--- É Estritamente Binária? ---\", arvore.ehEstritamenteBinaria());\r\n  console.log(\"--- É Perfeita? ---\", arvore.ehPerfeita());\r\n}\r\n\r\nexecutarTestes();\r\n","/*\r\nAtividade Final de Estrutura de Dados II\r\nTurma.: ADS 3º Período - Noturno\r\nEquipe: \r\n    - Francisnilto dos Santos Nascimento\r\n    - Vanessa Pereira Cunha \r\n*/\r\n\r\n\r\nimport { NoArvore } from './noArvore';\r\n\r\nexport class ArvoreBuscaBinaria<T> {\r\n  private raiz: NoArvore<T> | null = null;\r\n  private quantidade: number = 0;\r\n  private comparar: (a: T, b: T) => number;\r\n\r\n  constructor(comparador?: (a: T, b: T) => number) {\r\n    if (comparador) {\r\n      this.comparar = comparador;\r\n    } else {\r\n      this.comparar = function (a: any, b: any) {\r\n        if (a === b) {\r\n          return 0;\r\n        }\r\n        if (a < b) {\r\n          return -1;\r\n        }\r\n        return 1;\r\n      };\r\n    }\r\n  }\r\n\r\n  inserir(valor: T): void {\r\n    const novoNo = new NoArvore(valor);\r\n    if (this.raiz === null) {\r\n      this.raiz = novoNo;\r\n      this.quantidade = 1;\r\n      return;\r\n    }\r\n\r\n    let atual = this.raiz;\r\n    while (true) {\r\n      const comp = this.comparar(valor, atual.valor);\r\n      if (comp === 0) {\r\n        return; // não insere duplicatas\r\n      }\r\n      if (comp < 0) {\r\n        if (atual.esquerdo === null) {\r\n          atual.esquerdo = novoNo;\r\n          this.quantidade++;\r\n          return;\r\n        }\r\n        atual = atual.esquerdo;\r\n      } else {\r\n        if (atual.direito === null) {\r\n          atual.direito = novoNo;\r\n          this.quantidade++;\r\n          return;\r\n        }\r\n        atual = atual.direito;\r\n      }\r\n    }\r\n  }\r\n\r\n  contem(valor: T): boolean {\r\n    return this.encontrarNo(valor) !== null;\r\n  }\r\n\r\n  buscaLargura(): T[] {\r\n    const resultado: T[] = [];\r\n    if (this.raiz === null) {\r\n      return resultado;\r\n    }\r\n    const fila: NoArvore<T>[] = [this.raiz];\r\n    while (fila.length > 0) {\r\n      const no = fila.shift()!;\r\n      resultado.push(no.valor);\r\n      if (no.esquerdo !== null) {\r\n        fila.push(no.esquerdo);\r\n      }\r\n      if (no.direito !== null) {\r\n        fila.push(no.direito);\r\n      }\r\n    }\r\n    return resultado;\r\n  }\r\n\r\n  preOrdem(): T[] {\r\n    const resultado: T[] = [];\r\n    function visitar(no: NoArvore<T> | null) {\r\n      if (no === null) return;\r\n      resultado.push(no.valor);\r\n      visitar(no.esquerdo);\r\n      visitar(no.direito);\r\n    }\r\n    visitar(this.raiz);\r\n    return resultado;\r\n  }\r\n\r\n  emOrdem(): T[] {\r\n    const resultado: T[] = [];\r\n    function visitar(no: NoArvore<T> | null) {\r\n      if (no === null) return;\r\n      visitar(no.esquerdo);\r\n      resultado.push(no.valor);\r\n      visitar(no.direito);\r\n    }\r\n    visitar(this.raiz);\r\n    return resultado;\r\n  }\r\n\r\n  posOrdem(): T[] {\r\n    const resultado: T[] = [];\r\n    function visitar(no: NoArvore<T> | null) {\r\n      if (no === null) return;\r\n      visitar(no.esquerdo);\r\n      visitar(no.direito);\r\n      resultado.push(no.valor);\r\n    }\r\n    visitar(this.raiz);\r\n    return resultado;\r\n  }\r\n\r\n  altura(): number {\r\n    function calcularAltura(no: NoArvore<T> | null): number {\r\n      if (no === null) return -1;\r\n      const alturaEsquerda = calcularAltura(no.esquerdo);\r\n      const alturaDireita = calcularAltura(no.direito);\r\n      if (alturaEsquerda > alturaDireita) {\r\n        return alturaEsquerda + 1;\r\n      } else {\r\n        return alturaDireita + 1;\r\n      }\r\n    }\r\n    return calcularAltura(this.raiz);\r\n  }\r\n\r\n  quantidadeElementos(): number {\r\n    return this.quantidade;\r\n  }\r\n\r\n  ancestrais(valor: T): T[] {\r\n    const caminho: T[] = [];\r\n    let atual = this.raiz;\r\n    while (atual !== null) {\r\n      const comp = this.comparar(valor, atual.valor);\r\n      if (comp === 0) break;\r\n      caminho.push(atual.valor);\r\n      if (comp < 0) {\r\n        atual = atual.esquerdo;\r\n      } else {\r\n        atual = atual.direito;\r\n      }\r\n    }\r\n    if (atual === null || this.comparar(atual.valor, valor) !== 0) return [];\r\n    return caminho;\r\n  }\r\n\r\n  descendentes(valor: T): T[] {\r\n    const noInicial = this.encontrarNo(valor);\r\n    if (noInicial === null) return [];\r\n    const resultado: T[] = [];\r\n    function visitar(no: NoArvore<T> | null) {\r\n      if (no === null) return;\r\n      resultado.push(no.valor);\r\n      visitar(no.esquerdo);\r\n      visitar(no.direito);\r\n    }\r\n    visitar(noInicial.esquerdo);\r\n    visitar(noInicial.direito);\r\n    return resultado;\r\n  }\r\n\r\n  nivelDo(valor: T): number {\r\n    let nivel = 0;\r\n    let atual = this.raiz;\r\n    while (atual !== null) {\r\n      const comp = this.comparar(valor, atual.valor);\r\n      if (comp === 0) return nivel;\r\n      if (comp < 0) {\r\n        atual = atual.esquerdo;\r\n      } else {\r\n        atual = atual.direito;\r\n      }\r\n      nivel++;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  ehEstritamenteBinaria(): boolean {\r\n    function verificar(no: NoArvore<T> | null): boolean {\r\n      if (no === null) return true;\r\n      const temEsquerdo = no.esquerdo !== null;\r\n      const temDireito = no.direito !== null;\r\n      if ((temEsquerdo && !temDireito) || (!temEsquerdo && temDireito)) return false;\r\n      return verificar(no.esquerdo) && verificar(no.direito);\r\n    }\r\n    return verificar(this.raiz);\r\n  }\r\n\r\n  ehPerfeita(): boolean {\r\n    const altura = this.altura();\r\n    if (altura < 0) return true;\r\n    const esperado = Math.pow(2, altura + 1) - 1;\r\n    return this.quantidade === esperado;\r\n  }\r\n\r\n  private encontrarNo(valor: T): NoArvore<T> | null {\r\n    let atual = this.raiz;\r\n    while (atual !== null) {\r\n      const comp = this.comparar(valor, atual.valor);\r\n      if (comp === 0) return atual;\r\n      if (comp < 0) {\r\n        atual = atual.esquerdo;\r\n      } else {\r\n        atual = atual.direito;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/*\r\nAtividade Final de Estrutura de Dados II\r\nTurma.: ADS 3º Período - Noturno\r\nEquipe: \r\n    - Francisnilto dos Santos Nascimento\r\n    - Vanessa Pereira Cunha \r\n*/\r\n\r\nexport class NoArvore<T> {\r\n  valor: T;\r\n  esquerdo: NoArvore<T> | null = null;\r\n  direito: NoArvore<T> | null = null;\r\n\r\n  constructor(valor: T) {\r\n    this.valor = valor;\r\n  }\r\n}"],"names":["$6d41397c99658dc1$export$d3b2786d74aba50d","valor","esquerdo","direito","arvore","$c39e5a65f36c81b1$export$5bf6177d9d7f72fb","raiz","quantidade","comparar","comparador","a","b","inserir","novoNo","atual","comp","contem","encontrarNo","buscaLargura","resultado","fila","length","no","shift","push","preOrdem","visitar","emOrdem","posOrdem","altura","calcularAltura","alturaEsquerda","alturaDireita","quantidadeElementos","ancestrais","caminho","descendentes","noInicial","nivelDo","nivel","ehEstritamenteBinaria","verificar","temEsquerdo","temDireito","ehPerfeita","esperado","Math","pow","console","log","forEach","v"],"version":3,"file":"html.1a9ec528.js.map"}